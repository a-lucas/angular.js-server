{"version":3,"sources":["webpack:///webpack/bootstrap ea21353e6c658e1c37a5","webpack:///./src/AngularServerRenderer.ts","webpack:///external \"jsdom\"","webpack:///external \"debug\"","webpack:///external \"fs\"","webpack:///external \"path\"","webpack:///external \"shelljs\"","webpack:///external \"simple-url-cache\"","webpack:///external \"source-map-support\""],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;AACA,wDAAuD,uCAAuC;AAC9F;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC,8BAA6B;AAC7B;AACA;AACA,8BAA6B;AAC7B;AACA,sBAAqB;AACrB;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAAyE,4DAA4D,EAAE;AACvI,oFAAmF;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC1MA,mC;;;;;;ACAA,mC;;;;;;ACAA,gC;;;;;;ACAA,kC;;;;;;ACAA,qC;;;;;;ACAA,8C;;;;;;ACAA,gD","file":"dist/AngularServerRenderer.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap ea21353e6c658e1c37a5\n **/","\"use strict\";\nconst jsdom = require('jsdom');\nconst dbug = require('debug');\nconst fs = require('fs');\nconst path = require('path');\nconst shell = require('shelljs');\nconst simple_url_cache_1 = require('simple-url-cache');\nconst sourceMapSupport = require('source-map-support');\nsourceMapSupport.install({\n    retrieveSourceMap: (source) => {\n        if (source === 'AngularServerRenderer.js') {\n            return {\n                url: 'AngularServerRendererMap.js',\n                map: fs.readFileSync('AngularServerRenderer.js.map', 'utf8')\n            };\n        }\n        return null;\n    }\n});\nvar debug = dbug('angular.js-server');\nclass AngularServerRenderer {\n    constructor(config) {\n        this.config = config;\n        this.middleware = () => {\n            var self = this;\n            return (req, res, next) => {\n                debug('MiddleWare called with URL ', req.url);\n                if (req.method !== 'GET') {\n                    next();\n                }\n                if (req.xhr === true) {\n                    next();\n                }\n                if (/text\\/html/.test(req.get('accept')) !== true) {\n                    next();\n                }\n                var send = res.send.bind(res);\n                res.send = function (body) {\n                    if (typeof body === 'string') {\n                        self.render(body, req.url).then(function (result) {\n                            debug('MiddleWare successfully rendered');\n                            res.location(req.url);\n                            res.status(200);\n                            return send.apply(this, [result]);\n                        }).catch(function (err) {\n                            debug('MidleWare error rendering');\n                            res.status(500);\n                            res.location(req.url);\n                            return send.apply(this, [err]);\n                        });\n                    }\n                    else {\n                        return send.apply(this, [body]);\n                    }\n                };\n                next();\n            };\n        };\n        this.render = (html, url) => {\n            return new Promise((resolve, reject) => {\n                if (this.shouldRender(url) === false) {\n                    debug('This Angular URL should not be pre-rendered', url);\n                    resolve(html);\n                }\n                else {\n                    let cacheUrl = this.cache.url(url);\n                    cacheUrl.isCached().then((isCached) => {\n                        if (isCached === true) {\n                            debug('This URL is cached', url);\n                            cacheUrl.getUrl().then((res) => {\n                                resolve(res);\n                            });\n                        }\n                        else {\n                            jsdom.debugMode = true;\n                            let rendering = false;\n                            debug('SERVER URL = ', 'http://' + this.config.server.domain + ':' + this.config.server.port + url);\n                            let document = jsdom.jsdom(html, {\n                                features: {\n                                    FetchExternalResources: ['script'],\n                                    ProcessExternalResources: ['script']\n                                },\n                                url: 'http://' + this.config.server.domain + ':' + this.config.server.port + url,\n                                virtualConsole: jsdom.createVirtualConsole().sendTo(console),\n                                document: {\n                                    referrer: '',\n                                    cookie: 'key=value; expires=Wed, Sep 21 2011 12:00:00 GMT; path=/',\n                                    cookieDomain: this.config.server.domain\n                                }\n                            });\n                            let window = Object.assign(document.defaultView, {\n                                onServer: true,\n                                fs: fs,\n                                logConfig: this.config.log\n                            });\n                            debug('jsdom.jsdom loaded');\n                            let serverTimeout = setTimeout(() => {\n                                if (rendering)\n                                    return;\n                                debug('SERVER TIMEOUT ! ! !');\n                                rendering = true;\n                                let renderedHtml = this.getHTML(window, [serverTimeout]);\n                                cacheUrl.removeUrl().then(() => {\n                                    resolve(renderedHtml);\n                                    window.close();\n                                });\n                            }, this.config.server.timeout);\n                            window.addEventListener('ServerExceptionHandler', (err, data) => {\n                                rendering = true;\n                                cacheUrl.removeUrl().then(() => {\n                                    debug('EVENT LISTENER ON ServerExceptionHandler CATCHED', err.details);\n                                    reject(err.details);\n                                    window.close();\n                                    window.dispose();\n                                });\n                            });\n                            window.addEventListener('StackQueueEmpty', () => {\n                                debug('StackQueueEmpty event caught');\n                                if (rendering)\n                                    return;\n                                rendering = true;\n                                let renderedHtml = this.getHTML(window, [serverTimeout]);\n                                cacheUrl.cache(renderedHtml).then(() => {\n                                    resolve(renderedHtml);\n                                    window.close();\n                                    window.dispose();\n                                });\n                            });\n                            window.addEventListener('load', () => {\n                                debug('Application is loaded in JSDOM');\n                            });\n                        }\n                    });\n                }\n            });\n        };\n        debug('AngularServerRenderer initialized with config = ', this.config);\n        this.cache = new simple_url_cache_1.CacheEngine(this.config.cache.storageConfig, this.config.cache.cacheRules);\n        this.initiateLogFileStructure();\n    }\n    initiateLogFileStructure() {\n        this.config.log.dir = path.resolve(this.config.log.dir);\n        shell.mkdir('-p', this.config.log.dir);\n        const paths = [];\n        ['warn', 'log', 'debug', 'error', 'info'].forEach((item) => {\n            if (this.config.log[item].enabled) {\n                paths.push(path.resolve(path.join(this.config.log.dir, item)));\n            }\n        });\n        shell.touch(paths);\n    }\n    shouldRender(url) {\n        let i, regex;\n        switch (this.config.render.strategy) {\n            case 'none':\n                return false;\n            case 'all':\n                return true;\n            case 'include':\n                for (i in this.config.render.rules) {\n                    regex = this.config.render.rules[i];\n                    if (regex.test(url)) {\n                        return true;\n                    }\n                }\n                return false;\n            case 'exclude':\n                for (i in this.config.render.rules) {\n                    regex = this.config.render.rules[i];\n                    if (regex.test(url)) {\n                        return false;\n                    }\n                }\n                return true;\n        }\n    }\n    ;\n    getHTML(window, timeouts) {\n        debug('Getting HTML.');\n        let AngularDocument = window.angular.element(window.document);\n        let scope = AngularDocument.scope();\n        scope.$apply();\n        for (let i in timeouts) {\n            clearTimeout(timeouts[i]);\n        }\n        let html = window.document.documentElement.outerHTML;\n        debug('$cacheFactoryProvider', window.$cacheFactoryProvider);\n        if (typeof window.$cacheFactoryProvider !== 'undefined') {\n            let cachedData = window.$cacheFactoryProvider.exportAll();\n            let script = \"<script type='text/javascript'> \" +\n                \"/*No read only needed */\" +\n                \"/*Object.defineProperty (window,'$angularServerCache', {value :  \" + JSON.stringify(cachedData) + \",writable: false});*/\"\n                + \"window.$angularServerCache = \" + JSON.stringify(cachedData) + \";</script></head>\";\n            debug('inserting the script: ', script);\n            html = html.replace(/<\\/head>/i, script);\n        }\n        debug('returned HTML length: ', html.length);\n        return html;\n    }\n    ;\n}\n;\nmodule.exports = AngularServerRenderer;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/AngularServerRenderer.ts\n ** module id = 0\n ** module chunks = 0\n **/","module.exports = require(\"jsdom\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"jsdom\"\n ** module id = 1\n ** module chunks = 0\n **/","module.exports = require(\"debug\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"debug\"\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = require(\"fs\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"fs\"\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = require(\"path\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"path\"\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = require(\"shelljs\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"shelljs\"\n ** module id = 5\n ** module chunks = 0\n **/","module.exports = require(\"simple-url-cache\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"simple-url-cache\"\n ** module id = 6\n ** module chunks = 0\n **/","module.exports = require(\"source-map-support\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"source-map-support\"\n ** module id = 7\n ** module chunks = 0\n **/"],"sourceRoot":""}